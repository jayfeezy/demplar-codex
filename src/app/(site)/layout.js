"use client";
import { Geist, Geist_Mono } from "next/font/google";
import "@/styles/globals.css";
import React, { useEffect, useState } from "react";
import { Eye, LogOut, Settings, Shield, User } from "lucide-react";
import { usePathname } from "next/navigation";
import Link from "next/link";
import { SpeedInsights } from "@vercel/speed-insights/react";
const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

import { CharProvider, useChar } from "@/providers/CharProvider";
import { DarkProvider, useDark } from "@/providers/DarkProvider";
import { NotifProvider, useNotif } from "@/providers/NotifProvider";
import { MetaProvider } from "@/providers/MetaContext";

import { ProfileImage } from "@/components/ProfileImage";
// import { useSupabase } from "@/providers/AuthProvider";

// export const metadata = {
//   title: "Create Next App",
//   description: "Generated by create next app",
// };

// import SupabaseProvider from "@/providers/AuthProvider";
import clsx from "clsx";
import { slugify } from "@/utils/slugify";
import { urlFor } from "@/sanity/lib/image";

export default function RootLayout({ children, pageTitle = "Home" }) {
  const siteName = "Knights Demplar Codex";

  useEffect(() => {
    document.title = pageTitle ? `${pageTitle} – ${siteName}` : siteName;
  }, [pageTitle]);

  return (
    <html lang="en">
      {/* <SupabaseProvider initialSession={null}> */}
      <MetaProvider>
        <DarkProvider>
          <NotifProvider>
            <CharProvider>
              <Body>
                {children}
                <SpeedInsights />
              </Body>
            </CharProvider>
          </NotifProvider>
        </DarkProvider>
      </MetaProvider>
      {/* </SupabaseProvider> */}
    </html>
  );
}

const Body = ({ children }) => {
  const { darkMode } = useDark();
  const { notif } = useNotif();
  return (
    <body className={`${geistSans.variable} ${geistMono.variable} antialiased`}>
      <Header />

      <nav
        className={clsx(
          `shadow border-b sticky top-0 z-40 transition-colors duration-300`,
          darkMode ? "bg-gray-800 border-gray-700" : "bg-white border-gray-200"
        )}
      >
        <div className="max-w-7xl mx-auto px-4">
          <div className="flex overflow-x-auto scrollbar-hide">
            {[
              "home",
              "characters",
              "favorites",
              // "profile",
              "stats",
              "compare",
              "news",
              "suggestions",
              // "admin",
            ]
              // .filter((t) => t !== "admin" || user.role === "master")
              .map((t) => {
                const iconMap = {
                  home: "🏠",
                  characters: "👥",
                  favorites: "❤️",
                  compare: "⚖️",
                  news: "📰",
                  suggestions: "📧",
                  profile: <User className="w-4 h-4" />,
                  stats: <Eye className="w-4 h-4" />,
                  admin: <Settings className="w-4 h-4" />,
                };

                return (
                  <Link
                    key={t}
                    href={t === "home" ? "/" : `/${t}`}
                    className={clsx(
                      `py-4 px-4 sm:px-6 border-b-2 font-medium capitalize flex items-center space-x-2 whitespace-nowrap min-w-max touch-manipulation transition-colors duration-300`,
                      darkMode
                        ? "border-yellow-500 text-yellow-400 border-transparent text-gray-400 hover:text-gray-200"
                        : "border-yellow-600 text-yellow-600 border-transparent text-gray-500 hover:text-gray-700"
                    )}
                  >
                    <span className="text-lg">{iconMap[t]}</span>
                    <span className="text-sm sm:text-base">{t}</span>
                  </Link>
                );
              })}
          </div>
        </div>
      </nav>

      <div
        className={clsx(
          `min-h-screen transition-colors duration-300`,
          darkMode ? "dark bg-gray-900" : "bg-gray-50"
        )}
      >
        {notif && (
          <div
            className={clsx(
              `fixed top-4 right-4 z-50 border p-4 rounded-lg shadow-lg transition-colors duration-300`,
              darkMode
                ? "bg-gray-800 border-gray-700 text-gray-100"
                : "bg-white border-gray-200 text-gray-900"
            )}
          >
            {notif}
          </div>
        )}
        <main className="max-w-7xl mx-auto px-4 sm:px-6 py-6 sm:py-8">
          {children}
        </main>
      </div>
    </body>
  );
};
const Header = () => {
  // social auth, hold off for now
  // const { supabase, session } = useSupabase();

  const { chars, setSel } = useChar();
  const { darkMode, setDarkMode } = useDark();
  const { notify } = useNotif();
  const pathname = usePathname();

  const getCharacterOfDay = () => {
    const today = new Date().toDateString();
    const seed = today.split("").reduce((a, b) => a + b.charCodeAt(0), 0);
    return chars[seed % chars.length];
  };

  const characterOfDay = getCharacterOfDay();
  return (
    <header
      className={`relative shadow-xl transition-colors duration-300 bg-[url('https://res.cloudinary.com/dpr7n8ycn/image/upload/v1758333610/demplar-book-banner_btfgyl.webp')] bg-center bg-cover after:content-[''] after:absolute after:inset-0 after:bg-black/65 ${
        darkMode
          ? "bg-gradient-to-r from-gray-800 to-gray-900 text-white"
          : "bg-gradient-to-r from-purple-900 to-purple-800 text-white"
      }`}
    >
      <div
        className={`relative z-3 px-4 py-3 border-b transition-colors duration-300 ${
          darkMode
            ? "bg-gray-900/90 border-gray-700"
            : "bg-slate-800/90 border-slate-700"
        }`}
      >
        <div className="flex justify-between items-center max-w-7xl mx-auto">
          <h1 className="text-lg sm:text-xl font-bold">
            {/* 🐉 Demplar • {stats.total} Characters */}
            🐉 Demplar • {chars.length} Characters
          </h1>
          <div className="flex items-center gap-2 sm:gap-3">
            <button
              onClick={() => {
                setDarkMode(!darkMode);
                notify(
                  darkMode
                    ? "Light mode activated! ☀️"
                    : "Dark mode activated! 🌙"
                );
              }}
              className={`px-3 py-1.5 border rounded text-xs sm:text-sm min-h-[36px] min-w-[36px] flex items-center justify-center transition-colors duration-300 hover:opacity-80 ${
                darkMode
                  ? "bg-yellow-600/20 border-yellow-600/30 text-yellow-400"
                  : "bg-gray-600/20 border-gray-600/30 text-gray-300"
              }`}
              title={darkMode ? "Switch to Light Mode" : "Switch to Dark Mode"}
            >
              {darkMode ? "☀️" : "🌙"}
            </button>
            {/* <div
              className={`px-2 sm:px-3 py-1.5 border rounded text-xs sm:text-sm ${
                true || user.role === "master"
                  ? "bg-yellow-600/20 border-yellow-600/30 text-yellow-400"
                  : "bg-blue-600/20 border-blue-600/30 text-blue-400"
              }`}
            > */}
            {/* <Shield className="w-3 h-3 sm:w-4 sm:h-4 inline mr-1" /> */}
            {/* {user.role} Role*/}
            {/* {session?.user?.user_metadata?.user_name || ""} */}
            {/* </div> */}
            {/* <button
              onClick={() => {
                setUser(null);
                notify("Logged out 👋");
              }}
              className={`px-2 sm:px-3 py-1.5 border rounded text-xs sm:text-sm min-h-[36px] min-w-[36px] flex items-center justify-center transition-colors duration-300 ${
                darkMode
                  ? "border-gray-600 hover:bg-gray-800"
                  : "border-slate-600 hover:bg-slate-700"
              }`}
            >
              <LogOut className="w-4 h-4" />
            </button> */}
          </div>
        </div>
      </div>

      <div className="relative px-4 sm:px-6 py-6 sm:py-8 max-w-7xl mx-auto">
        <div className="flex flex-col sm:flex-row justify-between items-center mb-6 sm:mb-8 space-y-6 sm:space-y-0">
          <div className="text-4xl sm:text-6xl font-bold text-yellow-400 relative z-10">
            DEMPLAR
          </div>

          {pathname !== "characters" && (
            <div className="bg-yellow-600/20 border-2 border-yellow-600/40 rounded-xl p-4 max-w-sm z-10">
              <div className="text-center">
                <div className="text-yellow-300 text-sm font-bold mb-2">
                  🌟 CHARACTER OF THE DAY
                </div>
                <Link
                  onClick={() => {
                    setSel(characterOfDay);
                    notify(
                      `Viewing today's spotlight: ${characterOfDay.name} ⭐`
                    );
                  }}
                  href={`/characters/${slugify(characterOfDay?.name)}`}
                  className="group hover:scale-105 transition-transform"
                >
                  <div className="flex flex-col items-center space-y-2">
                    <ProfileImage
                      src={
                        characterOfDay?.cardImage
                          ? urlFor(characterOfDay?.cardImage)
                              ?.width(150)
                              ?.height(150)
                              ?.url()
                          : ""
                      }
                      alt={characterOfDay?.name}
                      size="w-16 h-16"
                    />
                    <div className="text-yellow-100 font-bold group-hover:text-yellow-50">
                      {characterOfDay?.name}
                    </div>
                    <div className="text-yellow-200 text-sm">
                      Level {characterOfDay?.level} •{" "}
                      {characterOfDay?.className}
                    </div>
                    <div className="text-yellow-300 text-xs opacity-75">
                      Click to view profile →
                    </div>
                  </div>
                </Link>
              </div>
            </div>
          )}
        </div>
      </div>
    </header>
  );
};
